{"name": "test_login_check", "status": "broken", "statusDetails": {"message": "Exception: Message: disconnected: unable to send message to renderer\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=131.0.6778.205)\nStacktrace:\n\tGetHandleVerifier [0x00007FF75F6CFB05+28789]\n\t(No symbol) [0x00007FF75F6386E0]\n\t(No symbol) [0x00007FF75F4D592A]\n\t(No symbol) [0x00007FF75F4C290C]\n\t(No symbol) [0x00007FF75F4C287C]\n\t(No symbol) [0x00007FF75F4C0F6B]\n\t(No symbol) [0x00007FF75F4C1D1F]\n\t(No symbol) [0x00007FF75F4D9F31]\n\t(No symbol) [0x00007FF75F4DAA1A]\n\t(No symbol) [0x00007FF75F4DF13C]\n\t(No symbol) [0x00007FF75F4DF20F]\n\t(No symbol) [0x00007FF75F528DBA]\n\t(No symbol) [0x00007FF75F5295FC]\n\t(No symbol) [0x00007FF75F5728A7]\n\t(No symbol) [0x00007FF75F54F47F]\n\t(No symbol) [0x00007FF75F56F654]\n\t(No symbol) [0x00007FF75F54F1E3]\n\t(No symbol) [0x00007FF75F51A938]\n\t(No symbol) [0x00007FF75F51BAA1]\n\tGetHandleVerifier [0x00007FF75FA0933D+3410093]\n\tGetHandleVerifier [0x00007FF75FA1E7DD+3497293]\n\tGetHandleVerifier [0x00007FF75FA12A73+3448803]\n\tGetHandleVerifier [0x00007FF75F797BBB+848171]\n\t(No symbol) [0x00007FF75F643C3F]\n\t(No symbol) [0x00007FF75F63F6E4]\n\t(No symbol) [0x00007FF75F63F87D]\n\t(No symbol) [0x00007FF75F62ED49]\n\tBaseThreadInitThunk [0x00007FFAA9A07374+20]\n\tRtlUserThreadStart [0x00007FFAAA6BCC91+33]", "trace": "self = <pages.login_page.LoginPage object at 0x0000019B2E8B58A0>\n\n    def is_login_successful(self):\n        \"\"\"Check if login was successful\"\"\"\n    \n        # try:\n        #     time.sleep(.5)\n        #     user_info_el = self.wait.until(EC.visibility_of_element_located(self.USERINFO_SPAN))\n        #     print(\"\\n\\n userinfo element located\", user_info_el.text)\n        #     user_info = user_info_el.text.lower()\n        #     print(\"\\n\\n\", user_info)\n        #     if \"logged in\" in user_info:\n        #         return True\n        #     else:\n        #         return False\n        try:\n            # 等待 userInfo 元素的文本包含 \"logged in\"\n>           self.wait.until(EC.text_to_be_present_in_element(self.USERINFO_SPAN, \"Logged in\"))\n\nsrc\\pages\\login_page.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n.venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:243: in _predicate\n    element_text = driver.find_element(*locator).text\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019B2E7208E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: unable to send message to renderer...07FF75F62ED49]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAA9A07374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAAA6BCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: unable to send message to renderer\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=131.0.6778.205)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF75F6CFB05+28789]\nE       \t(No symbol) [0x00007FF75F6386E0]\nE       \t(No symbol) [0x00007FF75F4D592A]\nE       \t(No symbol) [0x00007FF75F4C290C]\nE       \t(No symbol) [0x00007FF75F4C287C]\nE       \t(No symbol) [0x00007FF75F4C0F6B]\nE       \t(No symbol) [0x00007FF75F4C1D1F]\nE       \t(No symbol) [0x00007FF75F4D9F31]\nE       \t(No symbol) [0x00007FF75F4DAA1A]\nE       \t(No symbol) [0x00007FF75F4DF13C]\nE       \t(No symbol) [0x00007FF75F4DF20F]\nE       \t(No symbol) [0x00007FF75F528DBA]\nE       \t(No symbol) [0x00007FF75F5295FC]\nE       \t(No symbol) [0x00007FF75F5728A7]\nE       \t(No symbol) [0x00007FF75F54F47F]\nE       \t(No symbol) [0x00007FF75F56F654]\nE       \t(No symbol) [0x00007FF75F54F1E3]\nE       \t(No symbol) [0x00007FF75F51A938]\nE       \t(No symbol) [0x00007FF75F51BAA1]\nE       \tGetHandleVerifier [0x00007FF75FA0933D+3410093]\nE       \tGetHandleVerifier [0x00007FF75FA1E7DD+3497293]\nE       \tGetHandleVerifier [0x00007FF75FA12A73+3448803]\nE       \tGetHandleVerifier [0x00007FF75F797BBB+848171]\nE       \t(No symbol) [0x00007FF75F643C3F]\nE       \t(No symbol) [0x00007FF75F63F6E4]\nE       \t(No symbol) [0x00007FF75F63F87D]\nE       \t(No symbol) [0x00007FF75F62ED49]\nE       \tBaseThreadInitThunk [0x00007FFAA9A07374+20]\nE       \tRtlUserThreadStart [0x00007FFAAA6BCC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_login.TestLogin object at 0x0000019B2E6A37F0>, login_page = <pages.login_page.LoginPage object at 0x0000019B2E8B58A0>\n\n    def test_login_check(self, login_page):\n>       result = login_page.is_login_successful()\n\nsrc\\tests\\test_login.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x0000019B2E8B58A0>\n\n    def is_login_successful(self):\n        \"\"\"Check if login was successful\"\"\"\n    \n        # try:\n        #     time.sleep(.5)\n        #     user_info_el = self.wait.until(EC.visibility_of_element_located(self.USERINFO_SPAN))\n        #     print(\"\\n\\n userinfo element located\", user_info_el.text)\n        #     user_info = user_info_el.text.lower()\n        #     print(\"\\n\\n\", user_info)\n        #     if \"logged in\" in user_info:\n        #         return True\n        #     else:\n        #         return False\n        try:\n            # 等待 userInfo 元素的文本包含 \"logged in\"\n            self.wait.until(EC.text_to_be_present_in_element(self.USERINFO_SPAN, \"Logged in\"))\n            return True\n    \n        except Exception as error:\n>           raise Exception(error)\nE           Exception: Message: disconnected: unable to send message to renderer\nE             (failed to check if window was closed: disconnected: not connected to DevTools)\nE             (Session info: chrome=131.0.6778.205)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF75F6CFB05+28789]\nE           \t(No symbol) [0x00007FF75F6386E0]\nE           \t(No symbol) [0x00007FF75F4D592A]\nE           \t(No symbol) [0x00007FF75F4C290C]\nE           \t(No symbol) [0x00007FF75F4C287C]\nE           \t(No symbol) [0x00007FF75F4C0F6B]\nE           \t(No symbol) [0x00007FF75F4C1D1F]\nE           \t(No symbol) [0x00007FF75F4D9F31]\nE           \t(No symbol) [0x00007FF75F4DAA1A]\nE           \t(No symbol) [0x00007FF75F4DF13C]\nE           \t(No symbol) [0x00007FF75F4DF20F]\nE           \t(No symbol) [0x00007FF75F528DBA]\nE           \t(No symbol) [0x00007FF75F5295FC]\nE           \t(No symbol) [0x00007FF75F5728A7]\nE           \t(No symbol) [0x00007FF75F54F47F]\nE           \t(No symbol) [0x00007FF75F56F654]\nE           \t(No symbol) [0x00007FF75F54F1E3]\nE           \t(No symbol) [0x00007FF75F51A938]\nE           \t(No symbol) [0x00007FF75F51BAA1]\nE           \tGetHandleVerifier [0x00007FF75FA0933D+3410093]\nE           \tGetHandleVerifier [0x00007FF75FA1E7DD+3497293]\nE           \tGetHandleVerifier [0x00007FF75FA12A73+3448803]\nE           \tGetHandleVerifier [0x00007FF75F797BBB+848171]\nE           \t(No symbol) [0x00007FF75F643C3F]\nE           \t(No symbol) [0x00007FF75F63F6E4]\nE           \t(No symbol) [0x00007FF75F63F87D]\nE           \t(No symbol) [0x00007FF75F62ED49]\nE           \tBaseThreadInitThunk [0x00007FFAA9A07374+20]\nE           \tRtlUserThreadStart [0x00007FFAAA6BCC91+33]\n\nsrc\\pages\\login_page.py:101: Exception"}, "start": 1735871956584, "stop": 1735871960334, "uuid": "1e47569f-9dd8-4211-a66e-9f70d7c7ca3c", "historyId": "bf0a7c25b79c8432238450f77e9f6efa", "testCaseId": "bf0a7c25b79c8432238450f77e9f6efa", "fullName": "src.tests.test_login.TestLogin#test_login_check", "labels": [{"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "Perry"}, {"name": "thread", "value": "26276-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_login"}]}