{"name": "test_check_hardware_version", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF68C6502F5+28725]\n\t(No symbol) [0x00007FF68C5B2AE0]\n\t(No symbol) [0x00007FF68C444F39]\n\t(No symbol) [0x00007FF68C489214]\n\t(No symbol) [0x00007FF68C4BFE59]\n\t(No symbol) [0x00007FF68C4BA810]\n\t(No symbol) [0x00007FF68C4B98F3]\n\t(No symbol) [0x00007FF68C412EC5]\n\tGetHandleVerifier [0x00007FF68C97F30D+3366989]\n\tGetHandleVerifier [0x00007FF68C9912F0+3440688]\n\tGetHandleVerifier [0x00007FF68C9878FD+3401277]\n\tGetHandleVerifier [0x00007FF68C71AAAB+858091]\n\t(No symbol) [0x00007FF68C5BE74F]\n\t(No symbol) [0x00007FF68C411AD4]\n\tGetHandleVerifier [0x00007FF68C9ECB28+3815528]\n\tBaseThreadInitThunk [0x00007FF883A57374+20]\n\tRtlUserThreadStart [0x00007FF8841FCC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c36be15efe176eafe69cc30957dee1f8\")>\nconfig = {'base_url': 'http://10.90.90.90', 'device_information': {'boot_version': {'expected_value': '1.00.006', 'title': 'Boo...: 'Disabled', 'title': 'DHCP Client', 'type': 'string'}, ...}, 'implicit_wait': 40, 'model_name': 'DGS-1210-10XS', ...}\n\n    @pytest.fixture(scope=\"class\")\n    def logged_driver(driver, config):\n        \"\"\"\n        accept global driver object to log them in,\n        then return driver which is logged in.\n        :param driver:\n        :param config:\n        :return:driver\n        \"\"\"\n        print(\"\\n\\n initializing logged driver\")\n        from pages.LoginPage import LoginPage\n        login_driver = LoginPage(driver, config[\"base_url\"])\n>       login_driver.do_login(config[\"username\"], config[\"password\"])\n\nsrc\\conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pages\\LoginPage.py:94: in do_login\n    self.open()\nsrc\\pages\\LoginPage.py:41: in open\n    return self.driver.title\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:374: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027111929EA0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...ECB28+3815528]\\\\n\\\\tBaseThreadInitThunk [0x00007FF883A57374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8841FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF68C6502F5+28725]\nE       \t(No symbol) [0x00007FF68C5B2AE0]\nE       \t(No symbol) [0x00007FF68C444F39]\nE       \t(No symbol) [0x00007FF68C489214]\nE       \t(No symbol) [0x00007FF68C4BFE59]\nE       \t(No symbol) [0x00007FF68C4BA810]\nE       \t(No symbol) [0x00007FF68C4B98F3]\nE       \t(No symbol) [0x00007FF68C412EC5]\nE       \tGetHandleVerifier [0x00007FF68C97F30D+3366989]\nE       \tGetHandleVerifier [0x00007FF68C9912F0+3440688]\nE       \tGetHandleVerifier [0x00007FF68C9878FD+3401277]\nE       \tGetHandleVerifier [0x00007FF68C71AAAB+858091]\nE       \t(No symbol) [0x00007FF68C5BE74F]\nE       \t(No symbol) [0x00007FF68C411AD4]\nE       \tGetHandleVerifier [0x00007FF68C9ECB28+3815528]\nE       \tBaseThreadInitThunk [0x00007FF883A57374+20]\nE       \tRtlUserThreadStart [0x00007FF8841FCC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "start": 1739332427662, "stop": 1739332427662, "uuid": "2a69e15c-a02d-4be7-bbc0-d31a3641eedb", "historyId": "a4102bed22af97cf32be377f60e104fb", "testCaseId": "a4102bed22af97cf32be377f60e104fb", "fullName": "src.tests.test_2_device_information.TestDeviceInformation#test_check_hardware_version", "labels": [{"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_2_device_information"}, {"name": "subSuite", "value": "TestDeviceInformation"}, {"name": "host", "value": "Perry"}, {"name": "thread", "value": "5176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_2_device_information"}]}