{"name": "test_switch_to_main_frame", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (chrome not reachable)\n  (The process started from chrome location C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n\tGetHandleVerifier [0x00007FF75F6CFB05+28789]\n\t(No symbol) [0x00007FF75F6386E0]\n\t(No symbol) [0x00007FF75F4D592A]\n\t(No symbol) [0x00007FF75F5101E4]\n\t(No symbol) [0x00007FF75F50BC59]\n\t(No symbol) [0x00007FF75F55A77C]\n\t(No symbol) [0x00007FF75F559D60]\n\t(No symbol) [0x00007FF75F54F1E3]\n\t(No symbol) [0x00007FF75F51A938]\n\t(No symbol) [0x00007FF75F51BAA1]\n\tGetHandleVerifier [0x00007FF75FA0933D+3410093]\n\tGetHandleVerifier [0x00007FF75FA1E7DD+3497293]\n\tGetHandleVerifier [0x00007FF75FA12A73+3448803]\n\tGetHandleVerifier [0x00007FF75F797BBB+848171]\n\t(No symbol) [0x00007FF75F643C3F]\n\t(No symbol) [0x00007FF75F63F6E4]\n\t(No symbol) [0x00007FF75F63F87D]\n\t(No symbol) [0x00007FF75F62ED49]\n\tBaseThreadInitThunk [0x00007FFAA9A07374+20]\n\tRtlUserThreadStart [0x00007FFAAA6BCC91+33]", "trace": "config = {'base_url': 'http://10.90.90.90', 'implicit_wait': 40, 'screenshot_dir': 'screenshots'}\n\n    @pytest.fixture(scope=\"class\")\n    def driver(config):\n        \"\"\"WebDriver fixture for browser automation\"\"\"\n    \n        # printing information to console\n    \n        print(\"\\n\\n initializing webdriver\")\n    \n        chrome_options = Options()\n        # chrome_options.add_argument(\"--headless\")\n        chrome_options.add_argument(\"--no-sandbox\")\n        chrome_options.add_argument(\"--disable-dev-shm-usage\")\n    \n>       driver = webdriver.Chrome(\n            options=chrome_options\n        )\n\nsrc\\conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002193AAC47F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...07FF75F62ED49]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAA9A07374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAAA6BCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (chrome not reachable)\nE         (The process started from chrome location C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF75F6CFB05+28789]\nE       \t(No symbol) [0x00007FF75F6386E0]\nE       \t(No symbol) [0x00007FF75F4D592A]\nE       \t(No symbol) [0x00007FF75F5101E4]\nE       \t(No symbol) [0x00007FF75F50BC59]\nE       \t(No symbol) [0x00007FF75F55A77C]\nE       \t(No symbol) [0x00007FF75F559D60]\nE       \t(No symbol) [0x00007FF75F54F1E3]\nE       \t(No symbol) [0x00007FF75F51A938]\nE       \t(No symbol) [0x00007FF75F51BAA1]\nE       \tGetHandleVerifier [0x00007FF75FA0933D+3410093]\nE       \tGetHandleVerifier [0x00007FF75FA1E7DD+3497293]\nE       \tGetHandleVerifier [0x00007FF75FA12A73+3448803]\nE       \tGetHandleVerifier [0x00007FF75F797BBB+848171]\nE       \t(No symbol) [0x00007FF75F643C3F]\nE       \t(No symbol) [0x00007FF75F63F6E4]\nE       \t(No symbol) [0x00007FF75F63F87D]\nE       \t(No symbol) [0x00007FF75F62ED49]\nE       \tBaseThreadInitThunk [0x00007FFAA9A07374+20]\nE       \tRtlUserThreadStart [0x00007FFAAA6BCC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1735871990981, "stop": 1735871990981, "uuid": "f7255307-d1ec-462e-a1ab-20f0160681d0", "historyId": "17f7e02e439f21c03da7ffb2ce4bcfe6", "testCaseId": "17f7e02e439f21c03da7ffb2ce4bcfe6", "fullName": "src.tests.test_login.TestLogin#test_switch_to_main_frame", "labels": [{"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "Perry"}, {"name": "thread", "value": "21044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_login"}]}