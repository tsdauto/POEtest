{"name": "test_check_port_mirroring", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div/div/div/section/div/div/div[2]/div[2]/fieldset/table/tr[2]/td[1]/span\"}\n  (Session info: chrome=132.0.6834.160); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6050C02F5+28725]\n\t(No symbol) [0x00007FF605022AE0]\n\t(No symbol) [0x00007FF604EB510A]\n\t(No symbol) [0x00007FF604F093D2]\n\t(No symbol) [0x00007FF604F095FC]\n\t(No symbol) [0x00007FF604F53407]\n\t(No symbol) [0x00007FF604F2FFEF]\n\t(No symbol) [0x00007FF604F50181]\n\t(No symbol) [0x00007FF604F2FD53]\n\t(No symbol) [0x00007FF604EFA0E3]\n\t(No symbol) [0x00007FF604EFB471]\n\tGetHandleVerifier [0x00007FF6053EF30D+3366989]\n\tGetHandleVerifier [0x00007FF6054012F0+3440688]\n\tGetHandleVerifier [0x00007FF6053F78FD+3401277]\n\tGetHandleVerifier [0x00007FF60518AAAB+858091]\n\t(No symbol) [0x00007FF60502E74F]\n\t(No symbol) [0x00007FF60502A304]\n\t(No symbol) [0x00007FF60502A49D]\n\t(No symbol) [0x00007FF605018B69]\n\tBaseThreadInitThunk [0x00007FF883A57374+20]\n\tRtlUserThreadStart [0x00007FF8841FCC91+33]", "trace": "self = <tests.test_2_device_information.TestDeviceStatusAndQuickConfigurations object at 0x0000018B3B522C20>, device_information_page = <pages.DeviceInformationPage.DeviceInformationPage object at 0x0000018B3B781E40>\nconfig = {'base_url': 'http://10.90.90.90', 'device_information': {'boot_version': {'expected_value': '1.00.006', 'title': 'Boo...: 'Disabled', 'title': 'DHCP Client', 'type': 'string'}, ...}, 'implicit_wait': 40, 'model_name': 'DGS-1210-10XS', ...}\n\n    def test_check_port_mirroring(self, device_information_page, config):\n>       title, value = device_information_page.get_port_mirroring()\n\nsrc\\tests\\test_2_device_information.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\pages\\DeviceInformationPage.py:235: in get_port_mirroring\n    return self.get_title_and_value_from_locators(self.PORT_MIRRORING_TITLE_LOCATE, self.PORT_MIRRORING_LOCATE)\nsrc\\pages\\DeviceInformationPage.py:167: in get_title_and_value_from_locators\n    title_text = self.driver.find_element(*title_locator)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018B3B523190>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF605018B69]\\\\n\\\\tBaseThreadInitThunk [0x00007FF883A57374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8841FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div/div/div/section/div/div/div[2]/div[2]/fieldset/table/tr[2]/td[1]/span\"}\nE         (Session info: chrome=132.0.6834.160); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6050C02F5+28725]\nE       \t(No symbol) [0x00007FF605022AE0]\nE       \t(No symbol) [0x00007FF604EB510A]\nE       \t(No symbol) [0x00007FF604F093D2]\nE       \t(No symbol) [0x00007FF604F095FC]\nE       \t(No symbol) [0x00007FF604F53407]\nE       \t(No symbol) [0x00007FF604F2FFEF]\nE       \t(No symbol) [0x00007FF604F50181]\nE       \t(No symbol) [0x00007FF604F2FD53]\nE       \t(No symbol) [0x00007FF604EFA0E3]\nE       \t(No symbol) [0x00007FF604EFB471]\nE       \tGetHandleVerifier [0x00007FF6053EF30D+3366989]\nE       \tGetHandleVerifier [0x00007FF6054012F0+3440688]\nE       \tGetHandleVerifier [0x00007FF6053F78FD+3401277]\nE       \tGetHandleVerifier [0x00007FF60518AAAB+858091]\nE       \t(No symbol) [0x00007FF60502E74F]\nE       \t(No symbol) [0x00007FF60502A304]\nE       \t(No symbol) [0x00007FF60502A49D]\nE       \t(No symbol) [0x00007FF605018B69]\nE       \tBaseThreadInitThunk [0x00007FF883A57374+20]\nE       \tRtlUserThreadStart [0x00007FF8841FCC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "start": 1738655092908, "stop": 1738655132921, "uuid": "e878c595-9786-4467-82c4-5a8625b55264", "historyId": "b687588b78cc7891ab7d6799a00a3d87", "testCaseId": "b687588b78cc7891ab7d6799a00a3d87", "fullName": "src.tests.test_2_device_information.TestDeviceStatusAndQuickConfigurations#test_check_port_mirroring", "labels": [{"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_2_device_information"}, {"name": "subSuite", "value": "TestDeviceStatusAndQuickConfigurations"}, {"name": "host", "value": "Perry"}, {"name": "thread", "value": "5472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_2_device_information"}]}