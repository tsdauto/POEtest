{"name": "test_collapse_system_menu_then_click_system_settings", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=135.0.7049.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7350C5335+78597]\n\tGetHandleVerifier [0x00007FF7350C5390+78688]\n\t(No symbol) [0x00007FF734E78FDC]\n\t(No symbol) [0x00007FF734ED061D]\n\t(No symbol) [0x00007FF734EC2204]\n\t(No symbol) [0x00007FF734EF70EA]\n\t(No symbol) [0x00007FF734EC1AB6]\n\t(No symbol) [0x00007FF734EF7300]\n\t(No symbol) [0x00007FF734F1F2BB]\n\t(No symbol) [0x00007FF734EF6EC3]\n\t(No symbol) [0x00007FF734EC03F8]\n\t(No symbol) [0x00007FF734EC1163]\n\tGetHandleVerifier [0x00007FF73536EEED+2870973]\n\tGetHandleVerifier [0x00007FF735369698+2848360]\n\tGetHandleVerifier [0x00007FF735386973+2967875]\n\tGetHandleVerifier [0x00007FF7350E017A+188746]\n\tGetHandleVerifier [0x00007FF7350E845F+222255]\n\tGetHandleVerifier [0x00007FF7350CD2B4+111236]\n\tGetHandleVerifier [0x00007FF7350CD462+111666]\n\tGetHandleVerifier [0x00007FF7350B3589+5465]\n\tBaseThreadInitThunk [0x00007FFAFB257374+20]\n\tRtlUserThreadStart [0x00007FFAFB39CC91+33]", "trace": "self = <src.tests.test_4_firmware_information.TestFirmwareInformation object at 0x0000027CD48F40D0>, firmware_information_page = <src.pages.FirmwareInformationPage.FirmwareInformationPage object at 0x0000027CD49EE0B0>\n\n    def test_collapse_system_menu_then_click_system_settings(self, firmware_information_page):\n>       res = firmware_information_page.init()\n\nsrc\\tests\\test_4_firmware_information.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\pages\\FirmwareInformationPage.py:28: in init\n    self.find_element_if_present(FIRMWARE_INFORMATION_MENU_LOCATOR).click()\nC:\\Users\\poher\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\webui-HRF5VBXd-py3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\poher\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\webui-HRF5VBXd-py3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\poher\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\webui-HRF5VBXd-py3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027CD49AD090>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...350B3589+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAFB257374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAFB39CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7350C5335+78597]\nE       \tGetHandleVerifier [0x00007FF7350C5390+78688]\nE       \t(No symbol) [0x00007FF734E78FDC]\nE       \t(No symbol) [0x00007FF734ED061D]\nE       \t(No symbol) [0x00007FF734EC2204]\nE       \t(No symbol) [0x00007FF734EF70EA]\nE       \t(No symbol) [0x00007FF734EC1AB6]\nE       \t(No symbol) [0x00007FF734EF7300]\nE       \t(No symbol) [0x00007FF734F1F2BB]\nE       \t(No symbol) [0x00007FF734EF6EC3]\nE       \t(No symbol) [0x00007FF734EC03F8]\nE       \t(No symbol) [0x00007FF734EC1163]\nE       \tGetHandleVerifier [0x00007FF73536EEED+2870973]\nE       \tGetHandleVerifier [0x00007FF735369698+2848360]\nE       \tGetHandleVerifier [0x00007FF735386973+2967875]\nE       \tGetHandleVerifier [0x00007FF7350E017A+188746]\nE       \tGetHandleVerifier [0x00007FF7350E845F+222255]\nE       \tGetHandleVerifier [0x00007FF7350CD2B4+111236]\nE       \tGetHandleVerifier [0x00007FF7350CD462+111666]\nE       \tGetHandleVerifier [0x00007FF7350B3589+5465]\nE       \tBaseThreadInitThunk [0x00007FFAFB257374+20]\nE       \tRtlUserThreadStart [0x00007FFAFB39CC91+33]\n\nC:\\Users\\poher\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\webui-HRF5VBXd-py3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "start": 1744658083208, "stop": 1744658123529, "uuid": "07ab7b7e-d2c4-49ca-8c65-bca865b91906", "historyId": "4ee93a0ba6ca190cbc589ba0a0978830", "testCaseId": "4ee93a0ba6ca190cbc589ba0a0978830", "fullName": "src.tests.test_4_firmware_information.TestFirmwareInformation#test_collapse_system_menu_then_click_system_settings", "labels": [{"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_4_firmware_information"}, {"name": "subSuite", "value": "TestFirmwareInformation"}, {"name": "host", "value": "DESKTOP-FG98OVF"}, {"name": "thread", "value": "13620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_4_firmware_information"}]}